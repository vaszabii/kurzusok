@model Kurzusok.ViewModels.TeacherViewModel

@{
    ViewData["Title"] = "Oktatók";
}
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<div class="w-85 m-auto">
    <div class="container-fluid pt-2 overflow-hidden">
        <h2>Oktatók</h2>
        <button type="button" class="btn btn-primary" data-toggle="add-teacher-modal" data-target="#addTeacher" id="addteacher" data-url="@Url.Action("AddTeacher")">Oktató felvétele</button>
        <a class="btn btn-primary" href="#jump" id="nav">Ugrás a diagramokhoz</a>
        <form asp-controller="Teachers" asp-action="Search" id="searchform" class="float-right">
            <input type="text" name="search" class="form-control" placeholder="Keresés" />
        </form>
        <div class="clearfix"></div>
    </div>
    <div id="PlaceHolderHere"></div>
    <div class="pt-4">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        Név
                    </th>
                    <th>
                        Munkakör
                    </th>
                    <th>
                        Utolsó két félév össz óraszáma
                    </th>
                    <th>

                    </th>
                    <th>
                        Kezelés
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.TeachersList)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Position.PositionName)
                        </td>
                        <td>
                            @{double? hours = 0;
                                int? subjecthours = 0;}
                            @foreach (var courselink in item.CoursesLink)
                            {
                                if ((courselink.Course.Subject.Semester.Id == Model.LastTwoSemester[0].Id || courselink.Course.Subject.Semester.Id == Model.LastTwoSemester[1].Id) && (courselink.Course.CourseType == "Gyakorlat" || courselink.Course.CourseType == "Elmélet" || courselink.Course.CourseType == "Labor"))
                                {
                                    foreach (var programme in courselink.Course.Subject.ProgrammesLink)
                                    {
                                        int semWeek = 0;
                                        if (courselink.Course.Subject.Semester.Id == Model.LastTwoSemester[0].Id)
                                        {
                                            semWeek = Model.LastTwoSemester[0].Weeks;
                                        }
                                        else
                                        {
                                            semWeek = Model.LastTwoSemester[1].Weeks;
                                        }
                                        if (programme.Programme.Training == "nappali")
                                        {
                                            if (courselink.Course.CourseType == "Gyakorlat")
                                            {
                                                subjecthours = courselink.Course.Subject.GyHours;
                                            }
                                            else if (courselink.Course.CourseType == "Elmélet")
                                            {
                                                subjecthours = courselink.Course.Subject.EHours;
                                            }
                                            else
                                            {
                                                subjecthours = courselink.Course.Subject.LHours;
                                            }

                                            hours += Convert.ToDouble(courselink.Loads) / 100 * semWeek * (int)subjecthours;
                                        }
                                        else
                                        {
                                            subjecthours = courselink.Course.Subject.CorrespondHours;
                                            hours += Convert.ToDouble(courselink.Loads) / 100 * (int)subjecthours;
                                        }
                                    }

                                }
                            }
                            @if (hours == null)
                            {
                                @Html.Raw('0')
                            }
                            else
                            {
                                @hours.Value.ToString("0.##");
                            }

                        </td>
                        <td>
                            @if (!item.IsWorking)
                            {
                                @Html.Raw("Nem az egyetem oktatója")
                            }
                        </td>
                        <td>
                            @if (!item.IsWorking)
                            {
                                <button class="btn btn-xs" data-toggle="edit-teacher-modal" data-target="#teacherBack" id="teacherback" data-url="@Url.Action("TeacherBack")" data-id="@item.TeacherId">
                                    <span class="fas fa-user-plus" aria-hidden="true"></span>
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-default btn-xs" data-toggle="edit-teacher-modal" data-target="#editTeacher" id="editteacher" data-url="@Url.Action("EditTeacher")" data-id="@item.TeacherId">
                                    <span class="far fa-edit" aria-hidden="true"></span>
                                </button>
                                <button class="btn btn-xs" data-toggle="edit-teacher-modal" data-target="#teacherLeft" id="teacherleft" data-url="@Url.Action("TeacherLeft")" data-id="@item.TeacherId">
                                    <span class="fas text-danger fa-ban" aria-hidden="true"></span>
                                </button>
                            }
                        </td>
                    </tr>

                }
            </tbody>
        </table>
    </div>
    <div id="jump" class="pb-5"></div>
    @for (int i = 1; i < Model.Positions.Count() + 1; i++)
    {
        int maxwidth = 400;
        Console.WriteLine(Model.Positions[i - 1].Teachers.Count());
        if (Model.Positions[i - 1].Teachers.Count()>3)
        {
            if (Model.Positions[i - 1].Teachers.Count() > 5)
            {
                if (Model.Positions[i - 1].Teachers.Count() > 7)
                {
                    if (Model.Positions[i - 1].Teachers.Count() > 10)
                    {
                        maxwidth = 1500;
                    }
                    else
                    {
                        maxwidth = 1000;
                    }
                }
                else
                {
                    maxwidth = 800;
                }
            }
            else
            {
                maxwidth = 600;
            }
        }
        @Html.Raw("<div id='chart_div" + i + "' class='container-fluid m-auto text-center' style='height: 400px; min-width:400px; max-width:" + maxwidth + "px;'></div>")
    }

</div>

<script charset="utf-8">

    google.charts.load('current', { packages: ['corechart'] });
    @{foreach (var item in Model.Positions)
        {
            @Html.Raw("google.charts.setOnLoadCallback(function() {drawChart(" + Json.Serialize(item.PositionId) + ");});")
        }
     }
    function drawChart(positionId) {
            $.ajax({
            type: "POST",
                url: "@Url.Action("NextPosition")",
                data: { posId: positionId },
                success: function (dat) {
                    let toDiv = 'chart_div' + positionId;
                    if (dat.isvalid) {
                        let currentName = dat.currentposName;
                        let currentWeeks = dat.currentposWeek;
                        let weekArray = [currentWeeks / 4, currentWeeks / 2, { v: currentWeeks, f: currentWeeks+ " (MIN)" }, currentWeeks * 1.5];
                        let jsonarray = JSON.parse(dat.visualdata);
                        let data = new google.visualization.DataTable();
                        data.addColumn('string', currentName);
                        data.addColumn('number', 'Nappali');
                        data.addColumn('number', 'Levelezős');
                        data.addRows(jsonarray);
                        let options = {
                            title: currentName + ' (óra/hét)', legend: { position: 'none' }, isStacked: true, vAxis: { minValue: 0, ticks: weekArray }
                        };
                        let chart = new google.visualization.ColumnChart(document.getElementById(toDiv));
                        chart.draw(data, options);
                    }
                    else {
                        document.getElementById(toDiv).innerText = dat.response;
                        document.getElementById(toDiv).style.height = '30px';
                        document.getElementById(toDiv).style.maxWidth = '800px';
                        document.getElementById(toDiv).style.color='red';
                    }
            },
            });
    }
    window.addEventListener("resize", function () {
     @{foreach (var item in Model.Positions)
        {
            @Html.Raw("google.charts.setOnLoadCallback(function() {drawChart(" + Json.Serialize(item.PositionId) + ");});")
        }
     }

    })
</script>
@section Scripts{
    <script src="~/js/teacher.js" asp-append-version="true"></script>

}